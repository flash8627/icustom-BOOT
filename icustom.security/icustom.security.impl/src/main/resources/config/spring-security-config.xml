<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<!-- 静态资源，不用权限 -->
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.map" security="none" />
	<http pattern="/**/*.js" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.ico" security="none" />
	<http pattern="/views/login.html" security="none" />
	<http pattern="/views/accessDenied.html" security="none" />

	<http auto-config="true">

		<!-- <intercept-url pattern="/**" access="authenticated"/> -->
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/home" access="permitAll" />
		<!-- <intercept-url pattern="/services**" access="hasRole('ADMIN')" /> -->
		<intercept-url pattern="/admin**" access="hasRole('ADMIN')" />
		<intercept-url pattern="/dba**"
			access="hasRole('ADMIN') and hasRole('DBA')" />
		<form-login login-page="/views/login.html"
			username-parameter="ssoId" password-parameter="password"
			authentication-failure-url="/views/accessDenied.html" />
		<!-- <csrf /> -->
		<csrf disabled="true" />

		<!-- 登录成功后拒绝访问跳转的页面 -->
		<!-- <access-denied-handler error-page="/views/accessDenied.html" /> -->

		<!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 
			11/3/23 -->
		<!-- <custom-filter ref="customFilter" before="FILTER_SECURITY_INTERCEPTOR"/> -->

	</http>

	<!-- <authentication-manager> <authentication-provider> <user-service> <user 
		name="bill" password="abc123" authorities="ROLE_USER" /> <user name="admin" 
		password="root123" authorities="ROLE_ADMIN" /> <user name="dba" password="root123" 
		authorities="ROLE_ADMIN,ROLE_DBA" /> </user-service> </authentication-provider> 
		</authentication-manager> -->

	<!-- 一个自定义的filter，必须包含authenticationManager, accessDecisionManager,securityMetadataSource三个属性。 
		11/3/23 -->
	<!-- <beans:bean id="customFilter" class="com.gwtjs.security.custom.services.CustomFilterSecurityInterceptor"> 
		<beans:property name="authenticationManager" ref="authenticationManager"/> 
		<beans:property name="accessDecisionManager" ref="customAccessDecisionManager"/> 
		<beans:property name="securityMetadataSource" ref="customSecurityMetadataSourceService"/> 
		</beans:bean> -->

	<!-- 注意能够为authentication-manager 设置alias别名 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsManager">
			<password-encoder ref="passwordEncoder">
				<salt-source user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<!-- <authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService" />
	</authentication-manager> -->

	<!-- <remember-me remember-me-parameter="remember-me"
		remember-me-cookie="remember-me" token-validity-seconds="86400"
		data-source-ref="dataSource" /> -->

	<beans:bean id="customUserDetailsService"
		class="com.gwtjs.security.custom.services.CustomUserDetailsService" />


	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问 -->
	<!-- <beans:bean id="customSecurityMetadataSourceService" class="com.gwtjs.security.custom.services.CustomSecurityMetadataSourceService"></beans:bean> -->
	<!-- customAccessDecisionManager 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<!-- <beans:bean id="customAccessDecisionManager" class="com.gwtjs.security.custom.services.CustomAccessDecisionManager"></beans:bean> -->

</beans:beans>
