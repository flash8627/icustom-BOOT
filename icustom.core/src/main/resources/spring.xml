<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd"
	default-lazy-init="true">

	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc.oracle.properties</value>
		</property>
	</bean>

	<!-- 注解探测器 -->
	<!-- <context:component-scan
		base-package="com.gwtjs.security.*.services..*, com.gwtjs.*.services..*" /> -->
	<context:component-scan base-package="com.gwtjs"
		use-default-filters="false">
		<context:include-filter type="regex"
			expression="com.gwtjs.icustom.*.services..*" />
		<context:include-filter type="regex"
			expression="com.gwtjs.icustom.springsecurity.*.services..*" />
		<context:include-filter type="regex"
			expression="com.gwtjs.*.services..*" />
	</context:component-scan>

	<!-- 配置DataSource数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${spring.mybatis.datasource.driver-class-name}" />
		<property name="url" value="${spring.mybatis.datasource.url}" />
		<property name="username" value="${spring.mybatis.datasource.username}" />
		<property name="password" value="${spring.mybatis.datasource.password}" />
	</bean>

	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<!-- 表示在com.gwtjs.resultmap包或以下所有目录中，以-resultmap.xml结尾所有文件 -->
				<value>classpath:com/gwtjs/**/dao/**/*-resultmap.xml</value>
				<value>classpath:com/gwtjs/**/dao/*-resultmap.xml</value>
				<value>classpath:com/gwtjs/**/dao/**/*-mapper.xml</value>
				<!-- DAO -->
				<value>classpath:com/gwtjs/**/dao/**/*DAO.xml</value>
				<!-- Dao -->
				<value>classpath:com/gwtjs/**/dao/**/*Dao.xml</value>
				<!-- dao -->
				<value>classpath:com/gwtjs/**/dao/**/*dao.xml</value>
			</list>
		</property>

		<property name="plugins">
			<array>
				<bean id="pagerInterceptor" class="com.gwtjs.icustom.intercepts.PageInterceptor" />
			</array>
		</property>

	</bean>

	<!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务的传播特性 -->
	<bean id="baseTransactionProxy"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="edit*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
				<prop key="*">readOnly</prop>
			</props>
		</property>
	</bean>

	<!-- 通过扫描的模式，扫描目录在com/gwtjs/mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gwtjs.icustom" />
		<!-- <property name="markerInterface" value="com.gwtjs.core.mapper.SqlMapper" /> -->
	</bean>

	<import resource="classpath*:/config/*-beans.xml" />
	<import resource="classpath*:/config/*-config.xml" />
	<import resource="classpath*:/config/*-service.xml" />

</beans>